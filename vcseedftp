#!/usr/bin/env python
#encoding: utf8

##@namespace vcseedftp
# 軟體執行檔
#
# 這個檔案是軟體執行檔，同時也包括主要的函式庫跟實作
#
# @author	Chun-Yu Lee (Mat) <matlinuxer2@gmail.com>
# @author	Dieter Hsu <dieterplex@gmail.com>
# @date		2012-2013
# @copyright	Chun-Yu Lee || Dieter Hsu
#

import os
import sys
import time
import psutil
import logging
import sqlite3
import tempfile
import textwrap
import subprocess

try:
	import ConfigParser
except ImportError:
	import configparser as ConfigParser


SELF = os.path.realpath( __file__ )
ROOT = os.path.dirname( SELF )
CONFIG_HOME = os.path.join(os.getenv('XDG_CONFIG_HOME'), 'vcseedftp')
if not os.path.exists(CONFIG_HOME):
	os.makedirs(CONFIG_HOME)

SETTINGS_FILE = None
TIMEZONE = os.getenv('TZ', default="")
BATCH_ID = time.time() # Timestamp

HOST     = ""
USER     = ""
PASS     = ""
LCD      = ""
RCD      = ""
EXCL     = []
FIND_TZ  = False
FTP_PUSH = False
USE_HOOK = False
EXCLUDES = ""

# Logger fallback for module usage.
log = logging.getLogger()

## VCSeedFTP Custom Logger
#
#  A logger wrapper have two handler to output to stdout and sqlite file.
#
#  Notice that sqlite will commit when exit program.
#
class Log(logging.Logger):
	def __init__(self, name='vcseedftp'):
		logging.Logger.__init__(self, name)
		sql_hdl = SQLiteHandler('%s.log.sqlite' % name)
		sql_hdl.setLevel( logging.INFO )
		self.addHandler(sql_hdl)
		strm_hdl = logging.StreamHandler()
		strm_hdl.setLevel( logging.DEBUG )
		self.addHandler(strm_hdl)


## SQLite Handler
#
#	commit when `del` or context exit.
#
class SQLiteHandler(logging.Handler):
	"""SQLite Handler"""

	init_sql = """CREATE TABLE IF NOT EXISTS log(
						Id int,
						Created float,
						Name text,
						LogLevel text,
						Message text,
						Module text,
						FuncName text,
						LineNo int,
						Exception text
					);"""

	log_sql = """INSERT INTO log(
						Id,
						Created,
						Name,
						LogLevel,
						Message,
						Module,
						FuncName,
						LineNo,
						Exception
					)
					VALUES (
						%(bid)d,
						%(created).5f,
						'%(name)s',
						'%(levelname)s',
						'%(_msg)s',
						'%(module)s',
						'%(funcName)s',
						%(lineno)d,
						'%(exc_text)s'
					);"""

	def __init__(self, db='vcseedftp.log.sqlite'):
		logging.Handler.__init__(self)
		self.db = os.path.join(CONFIG_HOME, db)
		self.conn = sqlite3.connect(self.db)
		self.conn.execute(self.init_sql)
		self.conn.commit()
		self.cursor = self.conn.cursor()

	def __del__(self):
		self.conn.commit()
		self.cursor.close()
		self.conn.close()

	# for with clause usage
	def __exit__(self, exc_type, exc_value, traceback):
		self.__del__
		if exc_type:
			log.error(traceback)

	def emit(self, record, bid=BATCH_ID):
		record.bid = bid
		self.format(record)
		# escape for sql after format
		record._msg = record.msg.replace("'", "''")
		sql = self.log_sql % record.__dict__
		self.cursor.execute(sql)
		## comment it to commit once when exit
		# self.conn.commit()


## 檢查是否是 python3
#
# 檢查是否是 python3
#
def is_python3():
	major_version = sys.version_info[0]
	if major_version == 3:
		return True
	else:
		return False

## 列出系統預設的 timezone 清單
#
# 列出系統預設的 timezone 清單
#
def listTimezones():
	zoneinfo_path = "/usr/share/zoneinfo"
	retcode, out, err = popen( "cd %s; find Etc -type f " % zoneinfo_path )
	result = []
	for item in out.split('\n'):
		item_str = item.strip()
		if item_str != "":
			result.append( item_str )
	return result

## 執行系統指令
#
## 執行系統指令，並取得 stdout 跟 stderr 的結果
#
# @param cmd	指令的內容
# @retval tuple	回傳值為 ( retcode, out, err )
#
def popen(cmd):
	"""operations from LCD"""
	pipe = subprocess.Popen([ cmd ], shell=True, cwd=LCD, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
	(out, err) = pipe.communicate()

	if is_python3():
		# convert bytes to str in python3
		out, err = map(lambda s: s.decode(errors='replace'), (out, err))
	else:
		out, err = map(str, (out, err))

	return pipe.wait(), out, err

def file2string(path):
	with open(path) as f:
		return f.read()

def string2file(string, path):
	with open(path, 'w') as f:
		f.write(string)

def get_raw_string(s):
    if isinstance(s, str):
        s = s.encode('string-escape')
    elif isinstance(s, unicode):
        s = s.encode('unicode-escape')
    return s

# Multibyte octal string decoder for python3
def get_decode_string_py3(py3_str):
	"""decode octal string that contain multibyte charactor

	>>> s = b'D\t"images/\\351\\246\\226\\351\\240\\201_08.jpg"\n'
	>>> m.get_decode_string_py3(s.decode())
	'D\t"images/首頁_08.jpg"\n'
	"""
	i, b, w = 0, 0, bytearray()
	for c in py3_str:
		if c == '\\':
			i = 3
		elif i <=3 and i > 0: # in literal
			b = int(c,8)
			if   i == 3 and b < 4:
				pass
			elif i == 2:
				b = b + w.pop() * 8
			elif i == 1:
				b = b + w.pop() * 8
			else:
				raise RuntimeError("Not octal")
			w.append(b)
			i = i - 1
		else:
			w.append(ord(c))

	return w.decode()

## 檢查是否已有相同的程式在執行
#
# 檢查是否已有相同的程式在執行
#
# @param conf_name	設定檔的名稱
# @retval bool True, 表示已有相同程式在執行; False, 表示沒有相同的程式在執行
#
def check_process_running( conf_name ):
	result = False

	cur_pid = os.getpid() # 自己的 pid
	prog_name = os.path.basename( __file__ )

	for pid in psutil.get_pid_list():
		try:
			proc = psutil.Process(pid)
			cmdline  = proc.cmdline
		except:
			continue

		if pid != cur_pid and cmdline.__len__() >= 3:
			check0 = ( cmdline[0].find( "python"  ) >=0 )
			check1 = ( cmdline[1].find( prog_name ) >=0 )
			check2 = ( cmdline[2].find( conf_name ) >=0 )

			if check0 and check1 and check2:
				log.warn( "找到相同的程式已經在執行中 pid=%s ,\"%s\"" % ( pid, " ".join( cmdline )  ) )
				result = True

	return result

def do_ftp_download():
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	script_tmpl = textwrap.dedent("""\
			debug 2
			set ftp:list-options -a;
			set ftp:ssl-allow no;
			#set ftp:use-mdtm no
			#set ftp:timezone %s
			set net:timeout 10
			set net:max-retries 2
			set net:reconnect-interval-base 5
			set net:reconnect-interval-multiplier 1
			open ftp://%s:%s@%s || exit;
			lcd %s || exit;
			cd %s  || exit;
			mirror --delete --verbose --parallel=3 %s ;
			""")

	script_txt = script_tmpl % ( TIMEZONE, USER, PASS, HOST, LCD, RCD, EXCLUDES )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	log.info(cmd)
	log.info(script_txt)

	retcode = proc.wait()

	cmd = "echo ==== %s ==== ; cat %s " % ( script_stdout, script_stdout )
	_, result, _ = popen(cmd)
	log.info( result )
	cmd = "echo ==== %s ==== ; cat %s | grep -v '^Mirroring' " % ( script_stderr, script_stderr )
	_, result, _ = popen(cmd)
	log.info( result )

	log.info("return code: %s" % retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return retcode

def do_vcs_goto_branch( br ):
	cmd = "git checkout %s " % ( br )  ## 不要用 --force ，如此會打亂 timestamp，而造成 lftp 重複 mirror
	retcode, out, err = popen(cmd)

	return retcode

def do_vcs_check():
	check1 = False
	check2 = False

	if os.access( LCD, os.R_OK | os.W_OK | os.X_OK ):
		check1 = True

	if os.access( os.path.join( LCD, ".git" ), os.R_OK | os.W_OK | os.X_OK ):
		check2 = True

	if check1 and check2:
		return 0

	elif check1 != True:
		return 1
	elif check2 != True:
		return 2
	else:
		return 3

## 初始化 Git repository
#
#  初始化 git repository 和建立 `for_merge` branch
#
def do_vcs_init():
	cmd = "git init; touch .gitignore; "
	cmd += "git add --all; "
	cmd += "git commit --author \"Version Control Seed for FTP <bot@vcseedftp>\" -m init; "
	cmd += "git branch for_merge master"
	popen(cmd)

## 建立或移除 push2upload hook script
#
# 如果使用 USE_HOOK 選項時，會啟用 push2upload hook。
#
# @param enable	若是 True, 則開啟 git 的 hook 設定; 若False, 則移除 git 的 hook 設定
#
def do_vcs_setup_hook(enable=True):
	pathname = os.path.join(LCD, '.git', 'hooks', 'post-receive')
	if not enable and os.access( pathname, os.W_OK ):
		os.remove(pathname)
		log.info("Hook 已刪除")
		return -1

	# Hook 直接執行 vcseedftp
	hook_content = textwrap.dedent("""\
			#!/bin/sh
			unset GIT_DIR
			( which at >/dev/null 2>&1 ) && ( echo "python %s %s" | nohup at -m now & ) && exit
			python %s %s
			""" % ( SELF, SETTINGS_FILE, SELF, SETTINGS_FILE ) )

	string2file(hook_content, pathname)
	# chmod u+x
	import stat
	st = os.stat(pathname)
	os.chmod(pathname, st.st_mode | stat.S_IEXEC)
	log.info("Hook 已建立")
	return 0

def do_vcs_commit():
	cmd = "git add --all; "
	cmd += "git commit --author \"Version Control Seed for FTP <bot@vcseedftp>\" -m \"*\" "
	popen(cmd)

def check_vcs_mergefailed( lcd, hash_for_merge ):

	cmd = "cat ~/.vcseedftp-mergefail.log | grep \"%s\t%s\" " % ( lcd, hash_for_merge )
	retcode, out, err = popen(cmd)
	if retcode == 0:
		hash_intersect = out.strip()
		return True
	else:
		return False

def get_hash_from_branch( br ):
	result = ""

	cmd = "git rev-list --max-count=1 '%s' | cut -c1-7 " % ( br )
	retcode, out, err = popen(cmd)
	if retcode == 0:
		result = out.strip()

	return result

def get_base_hash_from_branches( br1, br2 ):
	result = ""

	cmd = "git merge-base %s %s | cut -c1-7" % ( br1, br2 )
	retcode, out, err = popen(cmd)
	if retcode == 0:
		result = out.strip()

	return result

def get_merged_list():
	"""return hash and log of commits from last merge line by line
	"""
	hash_pre_formerge	= get_hash_from_branch( "for_merge^" )
	hash_pre_master 	= get_hash_from_branch( "master^" )
	hash_base 			= get_base_hash_from_branches(hash_pre_formerge, hash_pre_master)
	cmd = "git log --not --pretty='%h %s' for_merge..{0}".format(hash_base)
	_, result, _ = popen(cmd)
	return result

def check_vcs_incomming():

	hash_for_merge = "" # branch == "for_merge" 的 hash
	hash_intersect = "" # "for_merge" 跟 "master" 分支共同交集的 hash

	hash_for_merge = get_hash_from_branch( "for_merge" )
	hash_intersect = get_base_hash_from_branches( "master", "for_merge" )

	log.info( ">>> for_merge = '%s', intersect = '%s' " % (hash_for_merge, hash_intersect) )

	if hash_intersect != hash_for_merge and hash_for_merge != "" and hash_intersect != "":
		if check_vcs_mergefailed( LCD, hash_for_merge ):
			log.warn( ">>> Changeset %s of for_merge 曾經 merge failed, 跳過 merge" % (hash_for_merge) )
			return False
		else:
			return True
	else:
		if hash_intersect == hash_for_merge:
			log.info( ">>> for_merge 的 HEAD 已在 master 的 changesets 裡，不需要再 merge " )
		return False

def do_vcs_reset():
	# get for_merge commit hash
	for_merge_hash = get_hash_from_branch( "for_merge" )
	cmd =  "git reset --hard;"
	#cmd += "git clean -df;" # 先不能執行 git clean, 不然 mirror --delete --reverse 會刪掉某些 untrack 的資料目錄
	cmd += "echo \"%s\t%s\" >> ~/.vcseedftp-mergefail.log" % (LCD, for_merge_hash)
	popen(cmd)

def do_vcs_merge():
	"""merge `for_merge' branch to master branch"""

	cmd = "git merge --ff-only for_merge"
	retcode, out, err = popen(cmd)
	if retcode != 0:
		log.warn("Merge 失敗, 原因: %s" % err.strip())
		cmd = "git merge --abort"
		popen(cmd)
		return False
	else:
		return True

def do_ftp_upload():
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	script_tmpl = textwrap.dedent("""\
			debug 2
			set ftp:list-options -a;
			set ftp:ssl-allow no;
			#set ftp:use-mdtm no
			#set ftp:timezone %s
			set net:timeout 10
			set net:max-retries 2
			set net:reconnect-interval-base 5
			set net:reconnect-interval-multiplier 1
			open ftp://%s:%s@%s || exit;
			lcd %s || exit;
			cd %s  || exit;
			mirror --reverse --dry-run --delete --verbose=3 --parallel=3 %s ;
			""")

	script_txt = script_tmpl % ( TIMEZONE, USER, PASS, HOST, LCD, RCD, EXCLUDES )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	log.info(cmd)
	log.info(script_txt)

	retcode = proc.wait()

	cmd = "echo ==== %s ==== ; cat %s " % ( script_stdout, script_stdout )
	_, result, _ = popen(cmd)
	log.info( result )
	cmd = "echo ==== %s ==== ; cat %s | grep -v '^Mirroring' " % ( script_stderr, script_stderr )
	_, result, _ = popen(cmd)
	log.info( result )

	log.info("return code: %s" % retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return retcode

## 將 git 的版本差異轉換成 lftp 的指令
#
# 將 git 在兩個 commit 之間的差異清單，轉換成 lftp 的指令
#
# @param diff_output	差異檔案清單的輸出內容 ( ex: git diff --name-status
#
# @todo python3 的 Big5 中文檔名輸出結果跟 python2 不一致
#
def convert_diff_to_ftp_commands( diff_output ):
	result = []
	is_py3 = is_python3()

	log.debug(diff_output)
	if is_py3:
		diff_output = get_decode_string_py3(diff_output)
	else:
		diff_output = diff_output.decode('string_escape')
	log.debug(diff_output)

	for line in diff_output.strip().split('\n'):
		tag      = line.split("\t")[0]
		filename = line.split("\t")[1]

		if filename[0] == "\"" and filename[-1:] == "\"":
				filename = filename[1:-1]

		if tag == "A" or tag == "M":
			result.append( "mput -d '%s' " % ( filename ) ) # use mput to create leading directory smartly
		elif tag == "D" :
			result.append( "rm '%s' " % ( filename ) )
		else:
			result.append( "# unknow tag '%s' " % ( tag ) )

	output = "\n".join( result )
	log.debug(output)

	return output

def do_ftp_upload2( diff_output, ext=None ):
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	upload_commands_text = convert_diff_to_ftp_commands( diff_output )

	script_tmpl = textwrap.dedent("""\
			debug 2
			set ftp:list-options -a;
			set ftp:ssl-allow no;
			#set ftp:use-mdtm no
			#set ftp:timezone %s
			set net:timeout 10
			set net:max-retries 2
			set net:reconnect-interval-base 5
			set net:reconnect-interval-multiplier 1
			open ftp://%s:%s@%s || exit;
			lcd %s || exit;
			cd %s  || exit;
			""")
	script_tmpl += upload_commands_text
	if ext != None:
		script_tmpl += "\n"
		script_tmpl += ext

	script_txt = script_tmpl % ( TIMEZONE, USER, PASS, HOST, LCD, RCD )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	log.info(cmd)
	log.info(script_txt)

	retcode = proc.wait()

	cmd = "echo ==== %s ==== ; cat %s " % ( script_stdout, script_stdout )
	_, result, _ = popen(cmd)
	log.info( result )
	cmd = "echo ==== %s ==== ; cat %s | grep -v '^Mirroring' " % ( script_stderr, script_stderr )
	_, result, _ = popen(cmd)
	log.info( result )

	log.info("return code: %s" % retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return retcode

def do_ftp_sync_check():
	result = -1

	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	script_tmpl = textwrap.dedent("""\
			debug 2
			set ftp:list-options -a;
			set ftp:ssl-allow no;
			set ftp:use-mdtm no
			set ftp:timezone %s
			set net:timeout 10
			set net:max-retries 2
			set net:reconnect-interval-base 5
			set net:reconnect-interval-multiplier 1
			open ftp://%s:%s@%s || exit;
			lcd %s || exit;
			cd %s  || exit;
			mirror --no-perms --no-umask --dry-run    --delete --verbose --parallel=5 %s ;
			mirror --no-perms --no-umask --dry-run -R --delete --verbose --parallel=5 %s ;
			""")

	script_txt = script_tmpl % ( TIMEZONE, USER, PASS, HOST, LCD, RCD, EXCLUDES, EXCLUDES )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	log.info(cmd)
	log.info(script_txt)

	retcode = proc.wait()

	log.info("return code: %s" % retcode)

	difference_complain = file2string( script_stdout )
	log.warn( "difference_complain: %s" % difference_complain )

	if retcode == 0 and difference_complain == "":
		result = 0

	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return result

def do_ftp_detect_timezone():
	global LCD, RCD, TIMEZONE
	msgs = []

	old_lcd, old_rcd, old_timezone = LCD, RCD, TIMEZONE

	tmp_dir   = tempfile.mkdtemp()
	tmp_file  = tempfile.mkstemp( dir = tmp_dir )
	test_dir  = os.path.basename( tmp_dir )
	test_file = os.path.basename( tmp_file[1] )

	LCD = tempfile.tempdir
	RCD = old_rcd
	diff_out = "A	%s/%s" % ( test_dir, test_file )
	do_ftp_upload2( diff_out )


	LCD = tmp_dir
	RCD = os.path.join( RCD, test_dir )
	TZs = listTimezones()
	ext_txt = ""
	for tz in TZs:
		ext_txt += textwrap.dedent( """\
			echo '>>> %s '
			set ftp:timezone %s
			mirror --no-perms --no-umask --dry-run    --delete --verbose --parallel=5;
			mirror --no-perms --no-umask --dry-run -R --delete --verbose --parallel=5;
			echo '<<< %s '
			""") % ( tz, tz, tz )

	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"
	script_tmpl = textwrap.dedent("""\
			debug 2
			set ftp:list-options -a;
			set ftp:ssl-allow no;
			set ftp:use-mdtm no
			set ftp:timezone %s
			set net:timeout 10
			set net:max-retries 2
			set net:reconnect-interval-base 5
			set net:reconnect-interval-multiplier 1
			open ftp://%s:%s@%s || exit;
			lcd %s || exit;
			cd %s  || exit;
			mirror --no-perms --no-umask --dry-run    --delete --verbose --parallel=5 %s ;
			mirror --no-perms --no-umask --dry-run -R --delete --verbose --parallel=5 %s ;
			""")

	script_txt = script_tmpl % ( TIMEZONE, USER, PASS, HOST, LCD, RCD, EXCLUDES, EXCLUDES )
	script_txt += ext_txt
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	print(cmd)
	print(script_txt)

	retcode = proc.wait()
	print("return code: %s" % retcode)

	for tz in TZs:
		_, out, _ = popen( "cat %s | grep -A 999 '^>>> %s' | tail -n +2 | grep -B 999 '^<<< %s' | head -n -1 " % ( script_stdout, tz, tz) )
		print ( tz, out )
		if out.strip() == "":
			msgs.append( "%s [OK]" % (tz) )
		else:
			msgs.append( "%s [Failed]" % (tz) )

	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	LCD = tempfile.tempdir
	RCD = old_rcd
	diff_out =  "D	%s/%s" % ( test_dir, test_file )
	ext_out  =  "rmdir '%s'" % ( test_dir )
	do_ftp_upload2( diff_out, ext=ext_out )

	# 還原 LCD, RCD, TIMEZONE 的原始設定
	LCD, RCD, TIMEZONE = old_lcd, old_rcd, old_timezone

	os.unlink( tmp_file[1] )
	os.rmdir( tmp_dir )

	print( "\n".join( msgs ) )

## 設定載入
#
# 設定檔載入功能會依照順序檢查：
#
#   1. 執行目錄下的 `vcseedftp.ini`
#   2. stdin 的第一個參數
#   3. 函式引數 path
#
# 作為設定檔載入，沒有則結束程式
# 並且重新設定 logger
#
# @param path 指定使用的設定檔路徑
# @retval string 設定檔的路徑
#
def do_load_settings(path=None):

	global HOST
	global USER
	global PASS
	global LCD
	global RCD
	global EXCL
	global FIND_TZ
	global FTP_PUSH
	global USE_HOOK
	global EXCLUDES
	global SETTINGS_FILE
	config = None

	if sys.argv.__len__() == 1:
		# 預設是讀取專案目錄下的 vcseedftp.ini
		SETTINGS_FILE = os.path.join( ROOT, "vcseedftp.ini")
	elif sys.argv.__len__() == 2:
		# 若有指定 *.ini 檔，則用指定的設定檔
		SETTINGS_FILE = os.path.realpath( sys.argv[1] )
	elif path is not None:
		SETTINGS_FILE = os.path.realpath( path )
	else:
		SETTINGS_FILE = None

	if os.access( SETTINGS_FILE, os.R_OK ):
		config = ConfigParser.RawConfigParser()
		config.optionxform = str
		config.read(SETTINGS_FILE)
	else:
		global log
		log.error("設定檔無法讀取: %s" % SETTINGS_FILE)
		exit()

	# project_name is the first output line and indicate which .ini is processing
	project_name = None
	settings_name = os.path.basename(SETTINGS_FILE)
	if settings_name.endswith('.ini'):
			project_name = settings_name[:-4]
	else:
			project_name = settings_name

	log = Log(project_name)
	log.info("PROJECT  : %s" %  project_name)

	HOST     = config.get('lftp', 'HOST')
	USER     = config.get('lftp', 'USER')
	PASS     = config.get('lftp', 'PASS')
	LCD      = config.get('lftp', 'LCD')
	RCD      = config.get('lftp', 'RCD')

	if config.has_option( 'lftp', 'EXCL' ):
		EXCL = config.get('lftp', 'EXCL').split('\n')

	EXCL += [
		"\.hg",
		"\.hgignore",
		"\.git",
		"\.gitignore",
		"error_log",
		"UploadFile/.*/",
		"templates/.*/templates_c/",
		]

	for i in range( 0, EXCL.__len__() ):
		val = EXCL[i].strip()
		if val != "":
			EXCL[i] = "--exclude "+EXCL[i]

	EXCLUDES = " ".join( EXCL )

	def _get_bool_value(section, option):
		if config.has_section( section ) and config.has_option( section , option ):
			ftp_push_str = config.get( section , option ).strip().lower()
			if ftp_push_str in ['yes', 'true', 'enable', 'on']:
				return True
		return False

	FIND_TZ  = _get_bool_value( 'vcseedftp', 'FIND_TZ' )
	FTP_PUSH = _get_bool_value( 'vcseedftp', 'FTP_PUSH' )
	USE_HOOK = _get_bool_value( 'vcseedftp', 'USE_HOOK' )

	log.info("FIND_TZ  : %s" % FIND_TZ)
	log.info("FTP_PUSH : %s" % FTP_PUSH)
	log.info("USE_HOOK : %s" % USE_HOOK)
	log.info("HOST     : %s" % HOST)
	log.info("USER     : %s" % USER)
	log.info("PASS     : %s" % PASS)
	log.info("LCD      : %s" % LCD)
	log.info("RCD      : %s" % RCD)
	log.info("EXCL     : %s" % EXCL)
	log.info("EXCLUDES : %s" % EXCLUDES)

	return SETTINGS_FILE

## 主程式
#
# 作為執行檔時會執行的主程式
# 需先 do_load_settings()
#
def main():
	ret = do_vcs_check()
	if ret == 1:
		log.error("本地端目錄存取有誤: %s" % LCD)
		exit()
	elif ret == 2:
		do_vcs_init()

	if FIND_TZ:
		do_ftp_detect_timezone()

	do_vcs_setup_hook( enable=USE_HOOK ) # 每次都執行
	do_vcs_goto_branch( "master" )
	do_ftp_download()
	do_vcs_commit()

	if FTP_PUSH and check_vcs_incomming():
		old_rev = get_hash_from_branch( "master" )
		log.info( "進行 merge ..." )
		ret = do_vcs_merge()
		if ret:
			msg_patch_info = get_merged_list()
			log.info( "Merged patch List:\n%s" % msg_patch_info )
			log.info( "Merge 成功，進行 ftp uploading ..." )
			#do_ftp_upload()
			new_rev = get_hash_from_branch( "master" )
			cmd =  "git diff --name-status %s %s" % ( old_rev, new_rev )
			_, diff_output, _ = popen(cmd)
			do_ftp_upload2( diff_output )
			log.info( "檢查 local 跟 remote ftp 的檔案是否一致" )

			ret = do_ftp_sync_check()
			if ret == 0:
				log.info( ">>> ftp sync 狀態一致 <<<" )
			else:
				log.warn( "!!! local 跟 remote 檔案不一致 !!!" )
		else:
			log.info( "恢復資料中..." )
			do_vcs_reset()

if __name__ == "__main__":
	conf_path = do_load_settings()
	conf_name = os.path.basename( conf_path )

	retry, sleep_sec = 3, 30
	while check_process_running( conf_name ):
		retry = retry - 1
		if not retry:
			log.warn( "程式忙碌中，結束重試！" )
			sys.exit(1)
		log.info( "等待%d秒重試中..." % sleep_sec )
		time.sleep(sleep_sec)

	try:
		sys.exit(main())
	except KeyboardInterrupt:
		log.warn("使用者中斷執行。")
		#TODO clean work tree
	except Exception as e:
		import traceback
		exc_trace = traceback.format_exc()
		log.error(exc_trace)
