#!/usr/bin/env python
#encoding: utf8
#
# Copyright: Chun-Yu Lee (Mat) <matlinuxer2@gmail.com> || Dieter Hsu <dieterplex@gmail.com>
#

import os
import sys
import subprocess
import tempfile
try:
	import ConfigParser
except ImportError:
	import configparser as ConfigParser


SELF = os.path.realpath( __file__ )
ROOT = os.path.dirname( SELF )


if sys.argv.__len__() == 1:
	# 預設是讀取專案目錄下的 vcseedftp.ini
	settings_file = os.path.join( ROOT, "vcseedftp.ini")
elif sys.argv.__len__() == 2:
	# 若有指定 *.ini 檔，則用指定的設定檔
	settings_file = os.path.realpath( sys.argv[1] )
else:
	settings_file = None
	
if os.access( settings_file, os.R_OK ):
		config = ConfigParser.RawConfigParser()
		config.optionxform = str
		config.read(settings_file)
else:
	print("設定檔無法讀取: ", settings_file)
	exit()

HOST     = config.get('lftp', 'HOST')
USER     = config.get('lftp', 'USER')
PASS     = config.get('lftp', 'PASS')
LCD      = config.get('lftp', 'LCD')
RCD      = config.get('lftp', 'RCD')
EXCL     = []
if config.has_option( 'lftp', 'EXCL' ):
	EXCL = config.get('lftp', 'EXCL').split('\n')

EXCL += [
	"\.hg",
	"\.hgignore",
	"\.git",
	"\.gitignore",
	"error_log",
	"UploadFile/.*/",
	"templates/.*/templates_c/",
	]

for i in range( 0, EXCL.__len__() ):
	val = EXCL[i].strip()
	if val != "":
		EXCL[i] = "--exclude "+EXCL[i]

EXCLUDES = " ".join( EXCL )

print("HOST: ", HOST)
print("USER: ", USER)
print("PASS: ", PASS)
print("LCD : ", LCD)
print("RCD : ", RCD)
print("EXCL: ", EXCL)

class MergeFailException(Exception): pass
class AddChangsFailException(Exception): pass

def _popen(cmd):
	"""operations from LCD"""
	pipe = subprocess.Popen([ cmd ], shell=True, cwd=LCD, stdout = subprocess.PIPE, stderr = subprocess.PIPE )
	(out, error) = pipe.communicate()
	print(out)
	print(error)
	return pipe.wait(), out, error

def file2string(path):
	result = ""
	f = open(path)
	for line in f:
		result += line

	f.close()

	return result


def string2file(string, path):
	f = open(path, 'w')
	f.write(string)
	f.close()


def do_ftp_download():
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	script_tmpl = """
	debug 1
	set ftp:list-options -a;
	set ftp:ssl-allow no;
	open ftp://%s:%s@%s || exit; 
	lcd %s || exit;
	cd %s  || exit;
	mirror --delete --verbose --parallel=3 %s ;
	""" 
	
	script_txt = script_tmpl % ( USER, PASS, HOST, LCD, RCD, EXCLUDES )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	print(cmd)
	print(script_txt)

	retcode = proc.wait();

	print("return code: ", retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return retcode

def do_vcs_goto_branch( br ):
	cmd = "git checkout --force %s " % ( br )
	retcode, out, err = _popen(cmd)

	return retcode

def do_vcs_check():
	check1 = False
	check2 = False

	if os.access( LCD, os.R_OK | os.W_OK | os.X_OK ):
		check1 = True

	if os.access( os.path.join( LCD, ".git" ), os.R_OK | os.W_OK | os.X_OK ):
		check2 = True	

	if check1 and check2:
		return 0

	elif check1 != True:
		return 1
	elif check2 != True:
		return 2
	else:
		return 3

def do_vcs_init():
	path_orig = os.getcwd()
	os.chdir( LCD )

	cmd = "git init"
	proc = subprocess.Popen([ cmd ], shell=True )
	proc.wait()

	os.chdir( path_orig )

def do_vcs_commit():
	ret = do_vcs_check()
	if ret == 1:
		print("本地端目錄存取有誤: ", LCD)
		exit()
	elif ret == 2:
		do_vcs_init()

	cmd = "git add --all"
	(retcode, out, error) = _popen(cmd)
	if retcode == 1:
		raise AddChangesFailException("加入更動檔案時失敗")

	cmd = "git commit --author \"Version Control Seed for FTP <bot@vcseedftp>\" -a -m \"*\" "
	_popen(cmd)

def check_vcs_mergefailed( lcd, hash_for_merge ):

	cmd = "cat ~/.vcseedftp-mergefail.log | grep \"%s\t%s\" " % ( lcd, hash_for_merge )
	retcode, out, err = _popen(cmd)
	if retcode == 0:
		hash_intersect = out.strip()
		return True
	else:
		return False

def get_hash_from_branch( br ):
	result = ""

	cmd = "git branch -v | cut -c3- | grep '%s'| awk '{print $2}'" % ( br )
	retcode, out, err = _popen(cmd)
	if retcode == 0:
		result = out.decode().strip()

	return result

def get_base_hash_from_branches( br1, br2 ):
	result = ""

	cmd = "git merge-base %s %s | cut -c1-7" % ( br1, br2 )
	retcode, out, err = _popen(cmd)
	if retcode == 0:
		result = out.decode().strip()

	return result
	

def check_vcs_incomming():

	hash_for_merge = "" # branch == "for_merge" 的 hash
	hash_intersect = "" # "for_merge" 跟 "master" 分支共同交集的 hash

	hash_for_merge = get_hash_from_branch( "for_merge" )
	hash_intersect = get_base_hash_from_branches( "master", "for_merge" )

	print ( ">>> for_merge = '%s', intersect='%s' " % (hash_for_merge, hash_intersect) ) 

	if hash_intersect != hash_for_merge and hash_for_merge != "" and hash_intersect != "":
		if check_vcs_mergefailed( LCD, hash_for_merge ):
			print ( ">>> Changeset %s of for_merge 曾經 merge failed, 跳過 merge" )
			return False
		else:
			return True
	else:
		if hash_intersect == hash_for_merge:
			print ( ">>> for_merge 的 HEAD 已在 master 的 changesets 裡，不需要再 merge " )
		return False

def do_vcs_merge():
	"""merge `for_merge' branch to master branch"""

	cmd = "git merge for_merge"
	(retcode, out, error) = _popen(cmd)
	if retcode != 0:
		# get for_merge commit hash
		for_merge_hash = get_hash_from_branch( "for_merge" )

		print("Merge 失敗, 恢復資料中...")
		cmd =  "git reset --hard;"
		#cmd += "git clean -df;" # 先不能執行 git clean, 不然 mirror --delete --reverse 會刪掉某些 untrack 的資料目錄
		cmd += "echo \"%s\t%s\" >> ~/.vcseedftp-mergefail.log" % (LCD, for_merge_hash)
		_popen(cmd)

		return False
	else:
		return True

def do_ftp_upload():
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	script_tmpl = """
	debug 1
	set ftp:list-options -a;
	set ftp:ssl-allow no;
	open ftp://%s:%s@%s || exit; 
	lcd %s || exit;
	cd %s  || exit;
	mirror --reverse --dry-run --delete --verbose=3 --parallel=3 %s ;
	""" 
	
	script_txt = script_tmpl % ( USER, PASS, HOST, LCD, RCD, EXCLUDES )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	print(cmd)
	print(script_txt)

	retcode = proc.wait();


	cmd = "echo ==== %s ==== ; cat %s " % ( script_stdout, script_stdout )
	_popen(cmd)
	cmd = "echo ==== %s ==== ; cat %s | grep -v '^Mirroring' " % ( script_stderr, script_stderr )
	_popen(cmd)

	print("return code: ", retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )
	
	return retcode

def do_ftp_upload2( old_rev, new_rev ):
	script_file = tempfile.mktemp()
	script_stdout = script_file + ".log"
	script_stderr = script_file + ".err"

	cmd =  "git diff --name-status %s %s" % ( old_rev, new_rev )
	cmd += "  | sed -e 's/^A\t\(.*\)/put \\1 -o \\1/g' "
	cmd += "  | sed -e 's/^D\t\(.*\)/rm \\1/g' "
	cmd += "  | sed -e 's/^M\t\(.*\)/put \\1 -o \\1/g' "
	retcode, out, err = _popen(cmd)
	
	upload_commands_text = out

	script_tmpl = """
	debug 1
	set ftp:list-options -a;
	set ftp:ssl-allow no;
	open ftp://%s:%s@%s || exit; 
	lcd %s || exit;
	cd %s  || exit;
	""" 
	script_tmpl += upload_commands_text
	
	script_txt = script_tmpl % ( USER, PASS, HOST, LCD, RCD )
	string2file( script_txt, script_file )

	cmd = "lftp -f %s" % ( script_file )
	proc = subprocess.Popen([ cmd ], shell=True, stdout=open( script_stdout, "w+"), stderr=open( script_stderr, "w+") )

	print(cmd)
	print(script_txt)

	retcode = proc.wait();

	cmd = "echo ==== %s ==== ; cat %s " % ( script_stdout, script_stdout )
	_popen(cmd)
	cmd = "echo ==== %s ==== ; cat %s | grep -v '^Mirroring' " % ( script_stderr, script_stderr )
	_popen(cmd)

	print("return code: ", retcode)
	os.unlink( script_file )
	os.unlink( script_stdout )
	os.unlink( script_stderr )

	return retcode

if __name__ == "__main__":
	do_vcs_goto_branch( "master" )
	do_ftp_download()
	do_vcs_commit()
	if check_vcs_incomming():
		old_rev = get_hash_from_branch( "master" )
		print ( "進行 merge ..." )
		ret = do_vcs_merge()
		if ret:	
			print ( "Merge 成功，進行 ftp uploading ..." )
			#do_ftp_upload()
			new_rev = get_hash_from_branch( "master" )
			do_ftp_upload2( old_rev, new_rev )
